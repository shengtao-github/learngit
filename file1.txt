sudo apt-get install git
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git init
git add readme.txt
git commit -m "wrote a readme file"

git status
git diff readme.txt

git log
git log --pretty=oneline
git reset --hard HEAD^
git reset --hard 1094a
git reflog			//查看命令历史

git diff HEAD -- readme.txt

git checkout -- readme.txt	//还原工作区
git reset HEAD readme.txt	//还原暂存区

git rm test.txt

//远程仓库
git remote add origin https://github.com/shengtao-github/learngit.git
git push -u origin master	//加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
git push origin master		//此后再推送，就可以使用该命令

git clone https://github.com/shengtao-github/gitskills.git

//分支管理
////创建与合并分支
git checkout -b dev			//创建并切换branch，相当于下面两个命令
git branch dev				//创建名为dev的branch
git checkout dev			//切换到已有branch

git branch					//查看分支

git merge dev				//合并dev到当前branch
git branch -d dev			//删除branch

////解决冲突
git log --graph --pretty=oneline --abbrev-commit

////分支管理策略
git merge --no-ff -m "merge with no-ff" dev		//不用fastforward模式merge

////Bug分支
git stash						//保存工作现场
git stash list					//查看保存的现场
git stash pop					//恢复现场的同时，删除stash内容，等同于下面两个命令	<可指定现场>
git stash apply stash@{0}		//恢复现场	<可指定现场>
git stash drop					//删除stash内容	<可指定现场>

////Feature分支
git branch -D feature-vulcan	//如果一个新分支commit了，但是没有merge过，-d是删不掉的，只能使用-D

////多人协作
//////推送分支
git remote -v					//查看远程库的信息(详细)
git push origin dev				//push指定branch(dev)到origin
//////抓取分支
git checkout -b dev origin/dev	//将远程的origin/dev分支创建到本地，由于clone时，只有master，所以必须
git pull
git branch --set-upstream-to=origin/dev dev		//指定本地dev分支与远程origin/dev分支的链接，一般git pull不下来(no tracking information)的时候用

////rebase变基
git rebase					//git push失败->git pull->git log发现有分叉->git rebase->git log发现分叉消失

//标签管理tag
